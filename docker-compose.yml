version: "3.8"
services:
  # The awaiter service uses a tiny image (~3MB) to await the health status 
  # of apps in other service containers.
  awaiter:
    image: alpine:latest
    container_name: 'awaiter'
    depends_on:
      broker:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: 'zookeeper'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    healthcheck:
      test: echo ruok | nc 127.0.0.1 2181 || exit -1
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 15s
    networks:
      - kafka_network      
  
  broker:
    image: confluentinc/cp-kafka
    container_name: 'broker'
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,HOSTPLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,HOSTPLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 15s
    links:
      - zookeeper
    networks:
      - kafka_network      

  akhq:
    image: tchiotludo/akhq
    container_name: 'akhq'
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:29092"
    ports:
      - 9001:8080
    links:
      - broker
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge
